import { app, BrowserWindow, dialog, ipcMain, IpcMainInvokeEvent, Menu, MenuItem } from 'electron';
import path from 'path';
import fixPath from 'fix-path';
import fs from 'fs';
import { Project } from 'types/project';
import { Request } from 'types/request';
import { Workspace } from 'types/workspace';
import * as client from 'main/client';
import { RequestResult } from 'types/request-result';
import makeRequestOptions from 'main/make-request-options';
import signRequestSigv4 from 'main/sign-request-sigv4';
import CProject from 'model/project';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

/**
 * The application window.
 */
let mainWindow: BrowserWindow;

/**
 * A project is open.
 */
let hasProject: boolean = false;

/**
 * Path to the Application Support folder.
 */
const dataDirPath = app.getPath('userData');

/**
 * Workspace file path
 */
const workspaceFilePath = `${dataDirPath}/workspace.json`;

// Add shell paths to the path of this process.
fixPath();

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 1000,
    width: 1800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    titleBarStyle: 'hidden',
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY.endsWith('/index.html') ? MAIN_WINDOW_WEBPACK_ENTRY :
    `${MAIN_WINDOW_WEBPACK_ENTRY}/index.html`);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();

  updateMenu();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  ipcMain.handle('openWorkspace', openWorkspace);
  ipcMain.handle('openProject', (event, path) => openProject(event, path));
  ipcMain.handle('saveProject', (event, path, project) => saveProject(event, path, project));
  ipcMain.handle('sendRequest', (event, request) => sendRequest(event, request));
  ipcMain.handle('saveWorkspace', (event, workspace) => saveWorkspace(event, workspace));
  ipcMain.handle('showOpenProjectDialog', showOpenProjectDialog);
  ipcMain.handle('showNewProjectDialog', showNewProjectDialog);
  // ipcMain.on('ondragstart', (a, b) => console.log('--------ondragstart',a,b));
  // ipcMain.on('ondrop', (a, b) => console.log('--------',a,b));
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

async function updateMenu() {
  const oldMenu = Menu.getApplicationMenu();
  const newMenu = new Menu();
  const newFileMenu = new MenuItem({
    label: 'File',
    role: 'fileMenu',
    submenu:[
      {
        label: 'Save',
        accelerator: process.platform === 'darwin' ? 'Cmd+S' : 'Ctrl+S',
        click: () => { mainWindow.webContents.send('save') }
      },
      {
        label: 'Close Tab',
        accelerator: process.platform === 'darwin' ? 'Cmd+W' : 'Ctrl+W',
        click: () => { mainWindow.webContents.send('closeTab') }
      },
      hasProject ? {
        label: 'Close Project',
        click: () => {
          hasProject = false;
          updateMenu();
          mainWindow.webContents.send('closeProject')
        }
      } : {
        label: 'Open Project',
        click: onOpenProjectMenuClick
      },
    ]
  });

  for (const item of oldMenu.items) {
    if (item.label === 'File') {
      newMenu.append(newFileMenu);
    }
    else {
      newMenu.append(item);
    }
  }

  Menu.setApplicationMenu(newMenu);
}

/**
 * Opens workspace file from disk.
 *
 * @returns The workspace object or undefined if workspace does not exist.
 */
async function openWorkspace(): Promise<Workspace> {
  try {
    const str = fs.readFileSync(workspaceFilePath, 'utf-8');
    return JSON.parse(str);
  }
  catch (error) {
    return;
  }
}

/**
 * Opens a project from disk.
 *
 * @param event Electron invoke event.
 * @param path The project file absolute path.
 * @returns The project object or undefined if project can't be opened.
 */
async function openProject(event: IpcMainInvokeEvent, path: string): Promise<Project> {
  const str = fs.readFileSync(path, 'utf-8');
  hasProject = true;
  updateMenu();
  return JSON.parse(str);
}

/**
 * Saves the project to disk.
 *
 * @param event Electron invoke event.
 * @param project
 */
async function saveProject(event: IpcMainInvokeEvent, path: string, project: Project) {
  fs.writeFileSync(path, JSON.stringify(project, null, 2), 'utf-8');
}

/**
 * Sends the HTTP request.
 *
 * @param event Electron invoke event.
 * @param request The request object to send
 * @returns The result object that contains the request info that's sent and the response object.
 */
async function sendRequest(event: IpcMainInvokeEvent, request: Request): Promise<RequestResult> {
  // Make https/http module request options.
  const requestOptions = makeRequestOptions(request);

  if (request.auth?.type === 'aws_sigv4') {
    await signRequestSigv4(requestOptions, request);
  }

  // Additional headers
  if (request.headers && request.headers.length > 0) {
    requestOptions.headers = {
      ...requestOptions.headers,
      ...(request.headers ?
        Object.fromEntries(
          request.headers
            .filter(header => header.enabled && !!header.key)
            .map(header => [header.key, header.value])
        ) : {}
      ),
    }
  }

  // const await makeRequestOptionsForAws(request);
  const resp = await client.sendRequest(requestOptions, request);
  return {
    requestOptions,
    response: resp
  };
}

/**
 * Saves workspace to disk.
 *
 * @param event Electron invoke event.
 * @param workspace The workspace object to save.
 */
async function saveWorkspace(event: IpcMainInvokeEvent, workspace: Workspace) {
  try {
    fs.writeFileSync(
      workspaceFilePath,
      JSON.stringify(workspace, null, 2),
      'utf-8'
    );
  }
  catch (error) {
    console.warn('Fail to save workspace:', error.message);
  }
}

/**
 * Shows new project dialog.
 *
 * @returns The path of the new project file.
 */
async function showNewProjectDialog(): Promise<string> {
  const res = await dialog.showSaveDialog(mainWindow, {
    title: 'New Project'
  });

  if (!res.canceled && res.filePath) {
    const ext = '.inflight.json';
    const name = path.parse(res.filePath).name;
    const filePath = res.filePath.endsWith(ext) ? res.filePath : `${res.filePath}${ext}`;
    fs.writeFileSync(filePath, JSON.stringify(new CProject(name), null, 2), 'utf-8');
    return filePath;
  }
}

/**
 * Shows open project dialog.
 *
 * @returns The path of the project file that's selected.
 */
async function showOpenProjectDialog(): Promise<string> {
  const res = await dialog.showOpenDialog(mainWindow, {
    properties: ['openFile'],
    filters: [
      {
        name: 'Custom File Type',
        extensions: ['json'],
      }
    ],
  });

  return !res?.canceled && res.filePaths[0] ? res.filePaths[0] : undefined
}

/**
 * Handles open project menu select event.
 */
async function onOpenProjectMenuClick() {
  const filePath = await showOpenProjectDialog();

  if (filePath) {
    mainWindow.webContents.send('openProject', filePath);
  }
}
